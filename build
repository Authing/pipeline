#!/usr/bin/env node

const async = require('async');
const path = require('path');
const yargs = require('yargs');
const parseComments = require('parse-comments');
const fs = require('fs');
const glob = require('glob');
const _ = require('lodash');

const argv = yargs
  .option('allRules', {
    alias: 'a',
    default: false
  })
  .option('outputPath', {
    alias: 'o',
    default: __dirname + '/templates.json'
  })
  .argv;

const files = glob.sync(__dirname + '/src/templates/*.js');

async.reduce(files, [], (templates, file, callback) => {

  fs.readFile(file, 'utf8', (err, data) => {
    if (err) return callback(err);
    const parsed = parseComments(data)[0];
    // strip the opening comment and remove extra newlines
    const code = data.split('\n').slice(parsed.comment.end).join('\n').trim();
    const rule = {
      id: path.basename(file).replace('.js', ''),
      title_zh: parsed.title_zh,
      title_en: parsed.title_en,
      overview_zh: parsed.overview_zh,
      categories: parsed.category ? parsed.category.split(',') : ['default'],
      types: parsed.type.split(','),
      code
    };
    templates.push(rule);

    return callback(null, templates);
  });
}, (err, templates) => {
  if (err) {
    console.log(err.stack);
    process.exit(1);
  }

  const expandedRules = _.chain(templates)
    .flatMap(rule => _.map(rule.categories, category => _.assign(_.clone(rule), { category })))
    .groupBy(r => r.category)
    .map((templates, category) => ({
      name: category,
      templates: _.map(templates, rule => _.omit(rule, 'category'))
    }))
    .value();

  // 新增可选 pipeline 类型列表
  const meta = JSON.parse(fs.readFileSync(path.join(__dirname, "src/meta.json")))
  const data = { templates: expandedRules, ...meta }
  console.log(`templates written to ${argv.outputPath}`);
  fs.writeFileSync(argv.outputPath, JSON.stringify(data, null, 2));
  process.exit(0);
});
