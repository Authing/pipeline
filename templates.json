[
  {
    "name": "访问控制",
    "templates": [
      {
        "id": "add-user-to-group",
        "title_zh": "将用户添加至用户组",
        "overview_zh": "如果当前用户邮箱后缀为 authing.cn，将其加入 ROOT_GROUP_ID（通过环境变量获取） 对应的用户组。 这里使用了 Authing Node SDK 的权限控制 API, 在这里可以了解更多：https://docs.authing.cn/authing/sdk/sdk-for-node/rbac",
        "categories": [
          "访问控制"
        ],
        "types": [
          "POST_AUTHENTICATION"
        ],
        "code": "async function pipe(user, context, callback) {\n  if (!user.email.endsWith('@authing.cn')) {\n    return callback(null, user, context)\n  }\n\n  try {\n    await authing.authz.addUserToGroup({\n      userId: user._id,\n      groupId: env.ROOT_GROUP_ID\n    })\n  } catch (error) { }\n\n  callback(null, user, context)\n}"
      },
      {
        "id": "email-domain-whitelist",
        "title_zh": "注册邮箱后缀白名单",
        "overview_zh": "若当前请求属于邮箱注册，只允许后缀为 example.com 的邮箱注册，否则返回 Access denied 错误提示。",
        "categories": [
          "访问控制"
        ],
        "types": [
          "PRE_REGISTER"
        ],
        "code": "async function pipe(context, callback) {\n  const email = context.data.userInfo.email;\n  // 非邮箱注册方式\n  if (!email) {\n    return callback(null, context)\n  }\n  if (!email.endsWith(\"example.com\")) {\n    return callback(new Error('Access denied.'));\n  }\n  return callback(null, context);\n}"
      }
    ]
  },
  {
    "name": "WebHook",
    "templates": [
      {
        "id": "lark-notify",
        "title_zh": "飞书新注册通知",
        "overview_zh": "当有新用户注册时，通过飞书群机器人通知。 LARK_WEBHOOK 通过 env 环境变量获取。",
        "categories": [
          "WebHook"
        ],
        "types": [
          "POST_REGISTER",
          "POST_AUTHENTICATION"
        ],
        "code": "async function pipe(user, context, callback) {\n  const webhook = env.LARK_WEBHOOK\n  await axios.post(webhook, {\n    title: \"New User Registered - From Authing Pipeline\",\n    text: `\n用户信息：\nID: ${user._id}\n昵称：${user.username}\n注册方式：${user.registerMethod}\n邮箱：${user.email}\n手机号：${user.phone}\nUA: ${user.device}\n用户池 ID: ${user.registerInClient}\n`\n  })\n  return callback(null, user, context)\n}"
      },
      {
        "id": "slack-notify",
        "title_zh": "Slack 群通知",
        "overview_zh": "新用户注册 Slack 群通知。 SLACK_WEBHOOK 通过 env 环境变量读取。 有关 Slack Incoming Message 使用方法请见：https://www.slack.com/services/new/incoming-webhook .",
        "categories": [
          "WebHook"
        ],
        "types": [
          "POST_REGISTER",
          "POST_AUTHENTICATION"
        ],
        "code": "async function pipe(user, context, callback) {\n  const qs = require('querystring')\n  const webhook = env.SLACK_WEBHOOK\n  const body = qs.stringify({\n    payload: JSON.stringify({\n      text: `\nAuthing 新用户注册 ～\nID: ${user._id}\n昵称：${user.username}\n注册方式：${user.registerMethod}\n邮箱：${user.email}\n手机号：${user.phone}\nUA: ${user.device}\n用户池 ID: ${user.registerInClient}`\n    })\n  })\n  await axios.post(webhook, body, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  })\n  callback(null, user, context)\n}"
      }
    ]
  },
  {
    "name": "扩展用户字段",
    "templates": [
      {
        "id": "persist-metadata",
        "title_zh": "添加自定义用户 Metadata",
        "overview_zh": "为用户添加自定义字段 Metadata，并可以持久化保存至数据库。 user.addMetaData(\"KEY\",\"VALUE\") 仅对当前请求有效。 user.addMetaDataAndPersist(\"KEY\", \"VALUE\") 会保存至数据库。",
        "categories": [
          "扩展用户字段"
        ],
        "types": [
          "POST_REGISTER",
          "POST_AUTHENTICATION"
        ],
        "code": "async function pipe(user, context, callback) {\n  user.addMetaData('KEY1', 'VALUE1')\n  user.addMetaDataAndPersist('KEY2', 'VALUE2')\n  callback(null, user, context)\n}"
      }
    ]
  }
]